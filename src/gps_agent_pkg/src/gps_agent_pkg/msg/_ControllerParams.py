# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gps_agent_pkg/ControllerParams.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gps_agent_pkg.msg

class ControllerParams(genpy.Message):
  _md5sum = "af70fadbba5a7e31052d264fa1030905"
  _type = "gps_agent_pkg/ControllerParams"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 controller_to_execute  # controller enum, defined in gps_pb2

CaffeParams caffe
LinGaussParams lingauss
TfParams tf

================================================================================
MSG: gps_agent_pkg/CaffeParams
string net_param # Serialized net parameter with weights (equivalent of prototxt file)
float32[] bias
float32[] scale
int32 dim_bias

================================================================================
MSG: gps_agent_pkg/LinGaussParams
# Time-varying Linear Gaussian controller
uint32 dX
uint32 dU
float64[] K_t  # Should be T x Du x Dx
float64[] k_t  # Should by T x Du

================================================================================
MSG: gps_agent_pkg/TfParams
# Tf Params. just need to track dU.
uint32 dU

"""
  __slots__ = ['controller_to_execute','caffe','lingauss','tf']
  _slot_types = ['int8','gps_agent_pkg/CaffeParams','gps_agent_pkg/LinGaussParams','gps_agent_pkg/TfParams']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       controller_to_execute,caffe,lingauss,tf

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControllerParams, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.controller_to_execute is None:
        self.controller_to_execute = 0
      if self.caffe is None:
        self.caffe = gps_agent_pkg.msg.CaffeParams()
      if self.lingauss is None:
        self.lingauss = gps_agent_pkg.msg.LinGaussParams()
      if self.tf is None:
        self.tf = gps_agent_pkg.msg.TfParams()
    else:
      self.controller_to_execute = 0
      self.caffe = gps_agent_pkg.msg.CaffeParams()
      self.lingauss = gps_agent_pkg.msg.LinGaussParams()
      self.tf = gps_agent_pkg.msg.TfParams()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_b.pack(self.controller_to_execute))
      _x = self.caffe.net_param
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.caffe.bias)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.caffe.bias))
      length = len(self.caffe.scale)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.caffe.scale))
      _x = self
      buff.write(_struct_i2I.pack(_x.caffe.dim_bias, _x.lingauss.dX, _x.lingauss.dU))
      length = len(self.lingauss.K_t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.lingauss.K_t))
      length = len(self.lingauss.k_t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.lingauss.k_t))
      buff.write(_struct_I.pack(self.tf.dU))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.caffe is None:
        self.caffe = gps_agent_pkg.msg.CaffeParams()
      if self.lingauss is None:
        self.lingauss = gps_agent_pkg.msg.LinGaussParams()
      if self.tf is None:
        self.tf = gps_agent_pkg.msg.TfParams()
      end = 0
      start = end
      end += 1
      (self.controller_to_execute,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.caffe.net_param = str[start:end].decode('utf-8')
      else:
        self.caffe.net_param = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.caffe.bias = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.caffe.scale = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.caffe.dim_bias, _x.lingauss.dX, _x.lingauss.dU,) = _struct_i2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.lingauss.K_t = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.lingauss.k_t = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.tf.dU,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_b.pack(self.controller_to_execute))
      _x = self.caffe.net_param
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.caffe.bias)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.caffe.bias.tostring())
      length = len(self.caffe.scale)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.caffe.scale.tostring())
      _x = self
      buff.write(_struct_i2I.pack(_x.caffe.dim_bias, _x.lingauss.dX, _x.lingauss.dU))
      length = len(self.lingauss.K_t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.lingauss.K_t.tostring())
      length = len(self.lingauss.k_t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.lingauss.k_t.tostring())
      buff.write(_struct_I.pack(self.tf.dU))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.caffe is None:
        self.caffe = gps_agent_pkg.msg.CaffeParams()
      if self.lingauss is None:
        self.lingauss = gps_agent_pkg.msg.LinGaussParams()
      if self.tf is None:
        self.tf = gps_agent_pkg.msg.TfParams()
      end = 0
      start = end
      end += 1
      (self.controller_to_execute,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.caffe.net_param = str[start:end].decode('utf-8')
      else:
        self.caffe.net_param = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.caffe.bias = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.caffe.scale = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 12
      (_x.caffe.dim_bias, _x.lingauss.dX, _x.lingauss.dU,) = _struct_i2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.lingauss.K_t = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.lingauss.k_t = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (self.tf.dU,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i2I = struct.Struct("<i2I")
_struct_b = struct.Struct("<b")
